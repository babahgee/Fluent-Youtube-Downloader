{"version":3,"file":"handlers.dialog.dist.js","mappings":"mBAE+CA,SAASC,cAAc,e","sources":["webpack://fluent-youtube-downloader/./application/scripts/handlers/dialog.ts"],"sourcesContent":["import { FluentButton } from \"./fluent-renderer\";\r\n\r\nconst dialogContainer: HTMLDivElement | null = document.querySelector(\".app-dialogs\");\r\n\r\nlet activeDialog: HTMLDivElement | null = null;\r\n\r\nfunction constructBaseDomElement() {\r\n\r\n\tconst dialogElement = document.createElement(\"div\");\r\n\tdialogElement.className = \"dialog\";\r\n\r\n\tdialogElement.innerHTML = `\r\n\t\t<div class=\"dialog__container container\">\r\n            <div class=\"dialog__modal\">\r\n                <div class=\"dialog__modal__titlebar\">\r\n                    <div class=\"dialog__modal__titlebar__container\">\r\n                        <div class=\"dialog__modal__titlebar__text\"></div>\r\n                        <img class=\"dialog__modal__titlebar__icon\" src=\"/static/media/icons/windows-icon-close.png\" alt=\"Close dialog\" />\r\n                    </div>\r\n                </div>\r\n                <div class=\"dialog__modal__content\">\r\n                    <div class=\"dialog__modal__content__container\">\r\n                        <div class=\"dialog__modal__content__icon\"></div>\r\n                        <div class=\"dialog__modal__content__text\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\t`;\r\n\r\n    dialogElement.querySelector<HTMLDivElement>(\".dialog__modal__titlebar__icon\")?.addEventListener(\"click\", hideActiveDialog);\r\n\r\n    return dialogElement;\r\n}\r\n\r\nfunction setTitle(mainElement: HTMLDivElement, title: string) {\r\n\r\n    const titlebarTextElement: HTMLDivElement | null = mainElement.querySelector(\".dialog__modal__titlebar__text\");\r\n\r\n    if (titlebarTextElement === null) return;\r\n\r\n    titlebarTextElement.innerText = title;\r\n}\r\n\r\nfunction setMessage(mainElement: HTMLDivElement, message: string | string[]) {\r\n\r\n    const contentTextElement: HTMLDivElement | null = mainElement.querySelector(\".dialog__modal__content__text\");\r\n\r\n    if (contentTextElement === null) return;\r\n\r\n    const spanElement = document.createElement(\"span\");\r\n\r\n    spanElement.innerHTML = Array.isArray(message) ? message.join(\"<br /><br />\") : message;\r\n\r\n    contentTextElement.appendChild(spanElement);\r\n   \r\n}\r\n\r\nfunction setIcon(mainElement: HTMLDivElement, iconType: DialogIcon) {\r\n\r\n    const contentIconElement = mainElement.querySelector(\".dialog__modal__content__icon\");\r\n\r\n    if (contentIconElement === null) return;\r\n\r\n    let iconHref: string = \"/static/media/icons/windows-color-icon-info.png\";\r\n\r\n    switch (iconType) {\r\n        case \"error\":\r\n            iconHref = \"/static/media/icons/windows-color-icon-error.png\"\r\n            break;\r\n        case \"warning\":\r\n            iconHref = \"/static/media/icons/windows-color-icon-warning.png\";\r\n            break;\r\n        case \"info\":\r\n            iconHref = \"/static/media/icons/windows-color-icon-info.png\";\r\n            break;\r\n        default:\r\n            iconHref = \"/static/media/icons/windows-color-icon-info.png\";\r\n            break;\r\n    }\r\n\r\n    const imageElement = document.createElement(\"img\");\r\n    imageElement.src = iconHref;\r\n    imageElement.alt = \"Dialog\";\r\n\r\n    contentIconElement.appendChild(imageElement);\r\n}\r\n\r\nfunction setButtons(mainElement: HTMLDivElement, buttons: DialogButton[]) {\r\n\r\n    const contentTextElement: HTMLDivElement | null = mainElement.querySelector(\".dialog__modal__content__text\");\r\n\r\n    if (contentTextElement === null) return;\r\n\r\n    const buttonContainer = document.createElement(\"div\");\r\n    buttonContainer.className = \"dialog__modal__content__text__buttons\";\r\n\r\n    buttons.forEach(function (button: DialogButton) {\r\n\r\n        const spanElement = document.createElement(\"span\");\r\n\r\n        spanElement.innerHTML = `<fluent-button>${button.label}</fluent-button>`;\r\n\r\n        spanElement.querySelector<FluentButton>(\"fluent-button\")?.addEventListener(\"click\", button.onClick);\r\n\r\n        buttonContainer.appendChild(spanElement);\r\n    });\r\n\r\n    contentTextElement.appendChild(buttonContainer);\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        showDialog: (title: string, message: string | string[], icon: DialogIcon, buttons: DialogButton[]) => void;\r\n        hideActiveDialog: () => void;\r\n    }\r\n}\r\n\r\nexport interface DialogButton {\r\n\tlabel: string;\r\n\tonClick: () => void;\r\n}\r\n\r\nexport type DialogIcon = \"info\" | \"warning\" | \"error\";\r\n\r\nexport function showDialog(title: string, message: string | string[], icon: DialogIcon, buttons: DialogButton[]) {\r\n\r\n    if (dialogContainer === null) return;\r\n\r\n    if (activeDialog !== null) return;\r\n\r\n    const baseElement = constructBaseDomElement();\r\n\r\n    setTitle(baseElement, title);\r\n    setMessage(baseElement, message);\r\n    setIcon(baseElement, icon);\r\n    setButtons(baseElement, buttons);\r\n\r\n    dialogContainer.appendChild(baseElement);\r\n\r\n    activeDialog = baseElement;\r\n}\r\n\r\nexport function hideActiveDialog() {\r\n\r\n    if (activeDialog === null) return;\r\n\r\n    activeDialog.remove();\r\n    activeDialog = null;\r\n}\r\n\r\nexport function initializeDialogUsage() {\r\n\r\n    window.showDialog = showDialog;\r\n    window.hideActiveDialog = hideActiveDialog;\r\n}"],"names":["document","querySelector"],"sourceRoot":""}